//
//  main.cpp
//  interativeQuickSort
//
//  Created by syfo_dias on 12/01/2021.
//  Copyright Â© 2021 syfo_dias. All rights reserved.
//

#include <iostream>
#include <vector>
#include <random>
#include "quickSort.h"
#include "selectionSort.h"
#include "insertionSort.h"

// RANDOM GENERATOR
namespace random_gen
{
    /** Set a seed. */
    auto seed = std::chrono::system_clock::now().time_since_epoch().count();
    /** Initialise the generator. */
    std::mt19937 generator {static_cast<std::mt19937::result_type>(seed)};
}

// DISTRIBUTION
int getRandomInt (const int& min, const int& max)
{
    std::uniform_int_distribution<> value {min, max};
    // transforms random int generated by generator into an int in range [min, max]
    return value (random_gen::generator);
}

template <typename C>
void printAll (const C& container)
{
    if (container.begin() == container.end())
        return;
    std::cout << "[" << container[0] << ",";
    for (int i = 1; i < container.size() - 1; ++i)
    {
        if (i%10 == 0)
            std::cout << '\n';
        std::cout << container[i] << ",";
    }
    std::cout << container[container.size() - 1] << "]";
        
}


// TESTS
// SPECIAL CASES

void quickSortTest1()
{
    std::vector<int> v {9, 19, 0, 2, 1, 11, 290, 521, 72, 3, -5};
    std::vector<int> sortedV {-5, 0, 1, 2, 3, 9, 11, 19, 72, 290, 521 };
    int numRec1 = sfd::qsort (v.begin(), v.end());
    int numRec2 = sfd::qsort (sortedV.begin(), sortedV.end());
    printAll(v);
    std::cout << "\nNum of recursive calls in v of size: " << v.size() << " is " <<  numRec1 << '\n';
    printAll(sortedV);
    
    std::cout << "\nNum of recursive calls in sorted v of size: " << sortedV.size() << " is " << numRec2 << '\n';
}

void testCounter ()
{
    sfd::Counter c;
    for (int i = 0; i < 10; ++i)
        ++c;
    std::cout << c.get() << '\n';
    
}

// RANDOM FILL

// PERFORMANCE TESTS

int main(int argc, const char * argv[]) {
    try {
        quickSortTest1();
    } catch (std::exception& e) {
        std::cerr << e.what() << '\n';
        return 1;
    }
    return 0;
}
